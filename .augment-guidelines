# Development Guidelines

## Table of Contents
1. [Special Commands](#special-commands)
2. [Code Style](#code-style)
3. [Component Development](#component-development)
4. [State Management](#state-management)
5. [Testing and Documentation](#testing-and-documentation)
6. [Error Handling & Debugging](#error-handling--debugging)
7. [Git Practices](#git-practices)

## Special Commands

- If I ask you "pls commit changes", you have to add all changes and use the command "git diff --name-only", without entering edit mode, and then push all changes.

## Code Style

- Use consistent indentation (2 spaces recommended)
- Use consistent quotes for strings (single or double)
- Follow naming conventions:
  - PascalCase for components
  - camelCase for functions and variables
  - UPPER_SNAKE_CASE for constants

## Component Development

- Create functional components
- Follow the one-component-per-file principle
- Use composition over inheritance
- Keep components small and focused on a single responsibility
- Extract reusable logic to custom hooks

## State Management

- Use React hooks for local component state
- Use React Context for shared state when appropriate
- Prefer controlled components over uncontrolled ones
- Consider performance implications when designing state architecture

## Testing and Documentation

- Write tests for critical functionality
- Include comments for complex logic
- Create README files explaining usage
- Keep documentation updated with changes

## Error Handling & Debugging

- Implement proper error handling
- Use error boundaries to catch and handle runtime errors gracefully
- Log meaningful error messages for debugging

## Git Practices

- Create feature branches from main branch
- Use descriptive commit messages
- Write commit messages in English
- Keep commits focused on single logical changes
